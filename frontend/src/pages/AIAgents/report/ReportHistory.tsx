import { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import {
  getReportHistory,
  ReportHistoryItem
} from '@/services/report-history.service';
import {
  ArrowLeft,
  Calendar,
  Copy,
  Printer,
  Download,
  FileText,
  Eye,
  FileSpreadsheet
} from 'lucide-react';
import { format } from 'date-fns';
import html2pdf from 'html2pdf.js';
import { toast } from 'sonner';


export function ReportHistory() {
  const [history, setHistory] = useState<ReportHistoryItem[]>([]);
  const [selectedItem, setSelectedItem] = useState<ReportHistoryItem | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchHistory = async () => {
      try {
        setLoading(true);
        const response = await getReportHistory();
        if (Array.isArray(response)) {
          setHistory(response);
        } else {
          console.error('Expected array but got:', response);
          setHistory([]);
          setError('Invalid data format received from server');
        }
      } catch (err) {
        setError('Failed to load history. Please try again later.');
        console.error('Error fetching Report history:', err);
        setHistory([]);
      } finally {
        setLoading(false);
      }
    };

    fetchHistory();
  }, []);

  const handleViewDetails = async (id: any) => {
    setSelectedItem(id);
  };

  const formatDate = (dateString: string) => {
    try {
      return format(new Date(dateString), 'MMM d, yyyy h:mm a');
    } catch (e) {
      return 'Invalid date';
    }
  };



  const printHistory = () => {
    if (!selectedItem) return;

    const content = document.getElementById('report-content');
    if (!content) return;

    const printWindow = window.open('', '_blank');
    if (!printWindow) {
      toast.error('Please allow pop-ups to print the report');
      return;
    }

    printWindow.document.write(`
      <html>
        <head>
          <title>Report: ${selectedItem.fileName}</title>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; padding: 20px; }
            h1 { color: #333; }
            .header { margin-bottom: 20px; }
            .content { margin-top: 20px; }
            .metadata { color: #666; margin-bottom: 10px; }
            .report { background: #f9f9f9; padding: 15px; border-radius: 4px; margin-top: 20px; }
            .footer { margin-top: 30px; color: #999; font-size: 12px; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>Financial Report</h1>
            <div class="metadata">
              <p><strong>Date:</strong> ${formatDate(selectedItem.createdAt.toString())}</p>
              <p><strong>File Name:</strong> ${selectedItem.fileName}</p>
              <p><strong>File Type:</strong> ${selectedItem.fileType}</p>
            </div>
          </div>
          <div class="report">
            ${selectedItem.report}
          </div>
          <div class="footer">
            <p>Generated by AI Report Agent at ${formatDate(new Date().toString())}</p>
          </div>
        </body>
      </html>
    `);

    printWindow.document.close();
    printWindow.focus();
    printWindow.print();

    toast.success('Print dialog opened');
  };

  const copyToClipboard = () => {
    if (!selectedItem) return;

    // Create a temporary element to extract plain text from HTML
    const tempElement = document.createElement('div');
    tempElement.innerHTML = selectedItem.report;
    const plainText = tempElement.textContent || tempElement.innerText || '';

    const content = `
Financial Report
Date: ${formatDate(selectedItem.createdAt.toString())}
File Name: ${selectedItem.fileName}
File Type: ${selectedItem.fileType}

Report Content:
${plainText}
    `;

    navigator.clipboard.writeText(content)
      .then(() => {
        toast.success('Copied to clipboard');
      })
      .catch(err => {
        console.error('Error copying to clipboard:', err);
        toast.error('Failed to copy to clipboard');
      });
  };

  const downloadAsPdf = () => {
    if (!selectedItem) return;

    const content = document.getElementById('report-content');
    if (!content) return;

    const opt = {
      margin: 1,
      filename: `report_${selectedItem.fileName}.pdf`,
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2 },
      jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
    };

    html2pdf().set(opt).from(content).save();

    toast.success('PDF download started');
  };




  return (
    <div className="container ">


      {error && (
        <div className="bg-red-50 border border-red-200 text-red-700 p-4 rounded-lg mb-6">
          <p>{error}</p>
        </div>
      )}

      {loading && (
        <div className="text-center py-10">
          <div className="inline-block animate-spin w-8 h-8 border-4 border-red-600 border-opacity-50 border-t-red-600 rounded-full mb-4"></div>
          <p className="text-gray-600">Loading...</p>
        </div>
      )}

      {!loading && history.length === 0 && (
        <div className="text-center py-12 bg-gray-50 rounded-lg border border-gray-200">
          <FileText className="w-16 h-16 mx-auto text-gray-400 mb-4" />
          <h3 className="text-xl font-semibold text-gray-700 mb-2">No Report History</h3>
          <p className="text-gray-500 mb-6">You haven't generated any reports yet.</p>
          <Link to="/ai-agents/report">
            <Button className="bg-red-600 hover:bg-red-700 text-white">
              <FileSpreadsheet className="w-4 h-4 mr-2" />
              Generate a Report
            </Button>
          </Link>
        </div>
      )}

      <div className="bg-white rounded-lg shadow-sm pb-4">
        {!loading && selectedItem ? (
          <div className="p-6 " >
            <div className="mb-6 flex items-center justify-between mt-4">
              <div >
                <h2 className="text-2xl font-bold text-gray-800 mb-1">{selectedItem.fileName}</h2>
                <div className="flex flex-col sm:flex-row sm:items-center text-sm text-gray-500 mb-3">
                  <span className="flex items-center mr-4 mb-2 sm:mb-0">
                    <Calendar className="w-4 h-4 mr-1 text-gray-400" />
                    {formatDate(selectedItem.createdAt.toString())}
                  </span>
                  <span className="flex items-center">
                    <FileText className="w-4 h-4 mr-1 text-gray-400" />
                    File Type: {selectedItem.fileType}
                  </span>
                </div>
              </div>

              <div className="flex items-center">
                {selectedItem && (
                  <Button onClick={() => setSelectedItem(null)}
                    style={{ minWidth: "100px", color: "#ffffff", border: "none" }}
                    className="bg-primary-red hover:bg-red-700 transition-colors duration-200 ml-auto"
                    variant="ghost">
                    <ArrowLeft className="mr-2 h-4 w-4" />
                    Back
                  </Button>
                )}
              </div>

            </div>

            <div className="border-t border-gray-100 py-4">
              <h3 className="text-lg font-semibold mb-2 text-gray-700">Report</h3>
              <div className="bg-gray-50 p-4 rounded-lg border border-gray-100 whitespace-pre-wrap">
                <div id="report-content" dangerouslySetInnerHTML={{ __html: selectedItem.report }} />
              </div>
            </div>

            <div className="flex justify-center gap-4 mt-6 border-t border-gray-100 pt-6 mb-6">
              <Button
                variant="outline"
                size="sm"
                className="border-gray-300 hover:border-blue-600 hover:text-blue-600"
                onClick={copyToClipboard}
              >
                <Copy className="w-4 h-4 mr-1" /> Copy
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="border-gray-300 hover:border-green-600 hover:text-green-600"
                onClick={printHistory}
              >
                <Printer className="w-4 h-4 mr-1" /> Print
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="border-gray-300 hover:border-purple-600 hover:text-purple-600"
                onClick={downloadAsPdf}
              >
                <Download className="w-4 h-4 mr-1" /> PDF
              </Button>

            </div>
          </div>
        ) : (
          <div className="overflow-x-auto rounded-lg shadow mt-4">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-red-600">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-white tracking-wider">
                    File Name
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-white tracking-wider">
                    File Type
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-white tracking-wider">
                    Date
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-white tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {history?.map((item) => (
                  <tr key={item._id} className="hover:bg-gray-50 transition-colors">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900">{item.fileName}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-500">{item.fileType}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center text-sm text-gray-500">
                        <Calendar className="w-4 h-4 mr-1" />
                        <span>{formatDate(item.createdAt?.toString() || '')}</span>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      <div className="flex items-center space-x-3">
                        <Button onClick={() => handleViewDetails(item)} className="text-black hover:text-red-500 hover:border-red-500" variant="outline" size="sm" title="View">
                          <Eye className="h-4 w-4" />
                        </Button>

                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>


    </div>
  );
}

export default ReportHistory;