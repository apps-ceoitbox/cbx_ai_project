import { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import {
  getMailSenderHistory,
  deleteMailSenderHistoryItem,
  clearMailSenderHistory,
  MailSenderHistoryItem
} from '@/services/history.service';
import {
  ArrowLeft,
  Calendar,
  Copy,
  Printer,
  Download,
  XCircle,
  Mail,
  Eye,
  Inbox,
  Send
} from 'lucide-react';
import { format } from 'date-fns';
import html2pdf from 'html2pdf.js';
import { toast } from 'sonner';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle
} from '@/components/ui/alert-dialog';

export function MailSenderHistory() {
  const [history, setHistory] = useState<MailSenderHistoryItem[]>([]);
  const [selectedItem, setSelectedItem] = useState<MailSenderHistoryItem | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [clearingHistory, setClearingHistory] = useState(false);
  const [showClearDialog, setShowClearDialog] = useState(false);

  useEffect(() => {
    const fetchHistory = async () => {
      try {
        setLoading(true);
        const response = await getMailSenderHistory();
        // Ensure data is an array before setting it
        if (Array.isArray(response)) {
          setHistory(response);
        } else {
          console.error('Expected array but got:', response);
          setHistory([]);
          setError('Invalid data format received from localStorage');
        }
      } catch (err) {
        setError('Failed to load history. Please try again later.');
        console.error('Error fetching Mail Sender history:', err);
        setHistory([]);
      } finally {
        setLoading(false);
      }
    };

    fetchHistory();
  }, []);  // No dependencies needed since we're using localStorage

  const handleViewDetails = async (id: any) => {
    try {
      setLoading(true);
      setSelectedItem(id);
    } catch (err) {
      setError('Failed to load history item. Please try again later.');
      console.error('Error fetching Mail Sender history item:', err);
    } finally {
      setLoading(false);
    }
  };

  const formatDate = (dateString: string) => {
    try {
      return format(new Date(dateString), 'MMM d, yyyy h:mm a');
    } catch (e) {
      return 'Invalid date';
    }
  };

  const handleDeleteHistoryItem = async (id: string, event: React.MouseEvent) => {
    event.stopPropagation();
    if (window.confirm('Are you sure you want to delete this history item?')) {
      try {
        await deleteMailSenderHistoryItem(id);

        // Update the history state
        setHistory(history.filter(item => item._id !== id));

        if (selectedItem && selectedItem._id === id) {
          setSelectedItem(null);
        }

        toast.success('History item deleted');
      } catch (err) {
        console.error('Error deleting history item:', err);
        toast.error('Failed to delete history item');
      }
    }
  };

  const printHistory = () => {
    if (!selectedItem) return;

    const content = document.getElementById('mail-content');
    if (!content) return;

    const printWindow = window.open('', '_blank');
    if (!printWindow) {
      toast.error('Please allow pop-ups to print the email');
      return;
    }

    printWindow.document.write(`
      <html>
        <head>
          <title>Email: ${selectedItem.subject}</title>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; padding: 20px; }
            h1 { color: #333; }
            .header { margin-bottom: 20px; }
            .content { margin-top: 20px; }
            .metadata { color: #666; margin-bottom: 10px; }
            .response { background: #f9f9f9; padding: 15px; border-radius: 4px; margin-top: 20px; }
            .footer { margin-top: 30px; color: #999; font-size: 12px; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>Email</h1>
            <div class="metadata">
              <p><strong>Date:</strong> ${formatDate(selectedItem.createdAt.toString())}</p>
              <p><strong>Recipient:</strong> ${selectedItem.recipient}</p>
              <p><strong>Prompt:</strong> ${selectedItem.subject}</p>
            </div>
          </div>
          <div class="content">
            <h2>Email Content</h2>
            <p>${selectedItem.message}</p>
          </div>
          <div class="response">
            <h2>AI Response</h2>
            <p>${selectedItem.response}</p>
          </div>
          <div class="footer">
            <p>Generated by AI Mail Sender at ${formatDate(new Date().toString())}</p>
          </div>
        </body>
      </html>
    `);

    printWindow.document.close();
    printWindow.focus();
    printWindow.print();

    toast.success('Print dialog opened');
  };

  const copyToClipboard = () => {
    if (!selectedItem) return;

    const content = `
Email
Date: ${formatDate(selectedItem.createdAt.toString())}
Recipient: ${selectedItem.recipient}
Prompt: ${selectedItem.subject}

Message:
${selectedItem.message}

Response:
${selectedItem.response}
    `;

    navigator.clipboard.writeText(content)
      .then(() => {
        toast.success('Copied to clipboard');
      })
      .catch(err => {
        console.error('Error copying to clipboard:', err);
        toast.error('Failed to copy to clipboard');
      });
  };

  const downloadAsPdf = () => {
    if (!selectedItem) return;

    const content = document.getElementById('mail-content');
    if (!content) return;

    const opt = {
      margin: 1,
      filename: `email_${selectedItem._id}.pdf`,
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2 },
      jsPDF: { unit: 'in', format: 'letter', orientation: 'portrait' }
    };

    html2pdf().set(opt).from(content).save();

    toast.success('PDF download started');
  };

  const handleClearHistory = () => {
    setShowClearDialog(true);
  };

  const confirmClearHistory = async () => {
    try {
      setClearingHistory(true);
      await clearMailSenderHistory();
      setHistory([]);
      setSelectedItem(null);
      toast.success('History cleared successfully');
    } catch (err) {
      console.error('Error clearing history:', err);
      toast.error('Failed to clear history');
    } finally {
      setClearingHistory(false);
      setShowClearDialog(false);
    }
  };

  return (
    <div className="container py-8">
      <div className="flex items-center mb-8">
        <Link to="/ai-agents/mail">
          <Button variant="outline" className="mr-4 border-gray-300 hover:border-red-600 hover:text-red-600">‚Üê Back</Button>
        </Link>
        <h1 className="text-3xl font-bold text-gray-800">
          <span className="bg-clip-text text-transparent bg-gradient-to-r from-red-500 to-red-700 pb-1 inline-block">Mail History</span>
        </h1>

        {/* Clear History button removed as requested */}

        {selectedItem && (
          <Button
            variant="outline"
            className="ml-auto border-gray-300 hover:border-red-600 hover:text-red-600"
            onClick={() => setSelectedItem(null)}
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back to List
          </Button>
        )}
      </div>

      {error && (
        <div className="bg-red-50 border border-red-200 text-red-700 p-4 rounded-lg mb-6">
          <p>{error}</p>
        </div>
      )}

      {loading && (
        <div className="text-center py-10">
          <div className="inline-block animate-spin w-8 h-8 border-4 border-red-600 border-opacity-50 border-t-red-600 rounded-full mb-4"></div>
          <p className="text-gray-600">Loading...</p>
        </div>
      )}

      {!loading && history.length === 0 && (
        <div className="text-center py-12 bg-gray-50 rounded-lg border border-gray-200">
          <Mail className="w-16 h-16 mx-auto text-gray-400 mb-4" />
          <h3 className="text-xl font-semibold text-gray-700 mb-2">No Mail History</h3>
          <p className="text-gray-500 mb-6">You haven't sent any emails yet.</p>
          <Link to="/ai-agents/mail">
            <Button className="bg-red-600 hover:bg-red-700 text-white">
              <Send className="w-4 h-4 mr-2" />
              Send an Email
            </Button>
          </Link>
        </div>
      )}

      <div className="bg-white rounded-lg shadow-sm">
        {!loading && selectedItem ? (
          <div className="p-6" id="mail-content">
            <div className="mb-6">
              <h2 className="text-2xl font-bold text-gray-800 mb-1">{selectedItem.subject}</h2>
              <div className="flex flex-col sm:flex-row sm:items-center text-sm text-gray-500 mb-3">
                <span className="flex items-center mr-4 mb-2 sm:mb-0">
                  <Calendar className="w-4 h-4 mr-1 text-gray-400" />
                  {formatDate(selectedItem.createdAt.toString())}
                </span>
                <span className="flex items-center">
                  <Inbox className="w-4 h-4 mr-1 text-gray-400" />
                  Recipient: {selectedItem.recipient}
                </span>
              </div>
            </div>

            <div className="border-t border-gray-100 py-4">
              <h3 className="text-lg font-semibold mb-2 text-gray-700">Message</h3>
              <div className="bg-gray-50 p-4 rounded-lg border border-gray-100 mb-6 whitespace-pre-wrap">
                {selectedItem.message}
              </div>

              <h3 className="text-lg font-semibold mb-2 text-gray-700">Response</h3>
              <div className="bg-gray-50 p-4 rounded-lg border border-gray-100 whitespace-pre-wrap">
                {selectedItem.response}
              </div>
            </div>

            <div className="flex justify-center gap-4 mt-6 border-t border-gray-100 pt-6">
              <Button
                variant="outline"
                size="sm"
                className="border-gray-300 hover:border-blue-600 hover:text-blue-600"
                onClick={copyToClipboard}
              >
                <Copy className="w-4 h-4 mr-1" /> Copy
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="border-gray-300 hover:border-green-600 hover:text-green-600"
                onClick={printHistory}
              >
                <Printer className="w-4 h-4 mr-1" /> Print
              </Button>
              <Button
                variant="outline"
                size="sm"
                className="border-gray-300 hover:border-purple-600 hover:text-purple-600"
                onClick={downloadAsPdf}
              >
                <Download className="w-4 h-4 mr-1" /> PDF
              </Button>
            </div>
          </div>
        ) : (
          <div className="overflow-x-auto rounded-lg shadow">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-red-600">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                    Prompt
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                    Recipient
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                    Date
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {history.map((item) => (
                  <tr key={item._id} className="hover:bg-gray-50 transition-colors">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-gray-900">{item.subject}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-500">{item.recipient}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center text-sm text-gray-500">
                        <Calendar className="w-4 h-4 mr-1" />
                        <span>{formatDate(item.createdAt?.toString() || '')}</span>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      <div className="flex items-center space-x-3">
                        <button
                          className="flex items-center px-3 py-1 bg-red-100 text-red-600 hover:bg-red-200 rounded-md transition-colors"
                          onClick={() => handleViewDetails(item)}
                          aria-label="View details"
                        >
                          <Eye className="w-5 h-5 mr-1" />
                          <span>View</span>
                        </button>
                        <button
                          className="text-gray-400 hover:text-red-600 transition-colors"
                          onClick={(e) => handleDeleteHistoryItem(item._id, e)}
                          aria-label="Delete item"
                        >
                          <XCircle className="w-5 h-5" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      <AlertDialog open={showClearDialog} onOpenChange={setShowClearDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Clear Mail History</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to clear all mail history? This action cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel disabled={clearingHistory}>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={confirmClearHistory}
              disabled={clearingHistory}
              className="bg-red-600 hover:bg-red-700 text-white"
            >
              {clearingHistory ? 'Clearing...' : 'Clear History'}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}
